pipeline {
    agent any
    
    tools {
        maven "maven"
    }
    environment {
        DOCKER_IMAGE = "mmbabu/teksit-devops:${BUILD_NUMBER}"
        KUBE_NAMESPACE = "jenkins"
        DEPLOYMENT_NAME = "deploymentservice.yaml"
        KUBE_CONFIG = credentials('k8s-token') // Jenkins credential for Kubeconfig
    }
    
    stages {
        stage('GIT-CHECKOUT-SCM') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/mmbabu0705/devops-k8s-project.git'
            }
        }
        stage('COMPILE-THE-SOURCE-CODE') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('TEST-THE-SOURCE-CODE') {
            steps {
                sh 'mvn test'
            }
        }
        stage('SONARQUBE-ANALYSIS') {
            steps {
                withSonarQubeEnv("sonar") {
                sh 'mvn sonar:sonar'
                }
            }
        }
        stage('TRIVY-SCAN') {
            steps {
               sh "trivy fs --security-checks vuln,config /var/lib/jenkins/workspace/SPRINGBOOT-CICD-JOB"
            }
        }
        stage('PACKAGE-THE-CODE') {
            steps {
               sh "mvn package"
            }
        }
        stage('UPALOAD-ARTIFACT-TO-THE-NEXUS-REPO') {
            steps {
              nexusArtifactUploader artifacts: [[artifactId: 'devops-integration', classifier: '', file: '/var/lib/jenkins/workspace/SPRINGBOOT-CICD-JOB/target/devops-integration.jar', type: 'jar']], credentialsId: 'nexus_cred', groupId: 'com.javatechie', nexusUrl: '3.110.131.80:8081/', nexusVersion: 'nexus3', protocol: 'http', repository: 'teksit-snapshot-repository', version: '0.0.1-SNAPSHOT'
            }
        }
        stage('DOCKER-BUILD') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker_cred', toolName: 'docker-latest') {
                        sh "docker build -t teksit-devops ."
                    }
                }
            }
        }
        stage('DOCKER-PUSH') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker_cred', toolName: 'docker-latest') {
                        sh "docker tag teksit-devops mmbabu/teksit-devops:${BUILD_NUMBER}"
                        sh "docker push mmbabu/teksit-devops:${BUILD_NUMBER}"
                    }
                }
            }
        }
        stage('DEPLOY-TO-KUBERNETES') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'k8s-token']) {
                        sh """
                        kubectl apply -f deploymentservice.yaml -n ${KUBE_NAMESPACE}
                        
                        """
                    }
                }
            }
        }
    }
}
